* すごいE本をElixirでやる(32)

第 13 章 並行アプリケーションを設計する から

#+begin_quote
そろそろ何か楽しくてもっと役に立つことをするときです。
この章では並行 Erlang で小さいアプリケーションを書きましょう。
#+end_quote

はい．

** 13.1 問題を理解する

#+begin_quote
最初のステップは、自分がいったい何をしようとしているのかを知ることです。
#+end_quote

*** やろうとしていること

- イベントを追加する。イベントには締め切り(警告する時間)、イベント名、詳細が含まれる。
- イベントの時間がきたら警告を表示する。
- イベント名でイベントをキャンセルする。
- ソフトウェアとのやり取りは、他の方法(GUI、Web 経由、IM 経由、メールなど)にも拡張できるかもしれないが、コマンドライン経由とする。

*** イベントサーバー

イベントサーバはクライアントから終了できる．シェルから自分自身のコードを再読み込みできる．

- クライアントからのサブスクライブを受け取る。
- イベントプロセスから出された通知を各サブスクライバに転送する。
- イベントを追加するためにメッセージを受け取る(必要なプロセス x、y、z を起動する)。
- イベントのキャンセルをするメッセージを受け取って、イベントプロセスを殺す。

*** クライアント

イベントサーバをサブスクライブしている大量のクライアントを簡単に設計できなければいけない．

- イベントサーバをサブスクライブして、メッセージとして通知を受ける。
- サーバにイベントを詳細情報と一緒に追加するように依頼する。
- サーバにイベントをキャンセルするように依頼する。
- サーバを(落ちたかどうか知るために)監視する。
- 必要があればイベントサーバを終了する。

*** 表示される通知を表すプロセス

- 時間がきたらイベントサーバにメッセージを送る。
- キャンセルのメッセージを受け取って死ぬ。

** 13.2 プロトコルを決める

#+begin_quote
各コンポーネントが何をすべきで、何をやり取りするかが分かったところで、
送信されるすべてのメッセージの一覧を作り、どういうメッセージが送信されるかを決めていきましょう。
#+end_quote

なるほど．

#+begin_quote
サーバを終了したい場合とサーバがクラッシュした場合について考える必要があります。
#+end_quote

#+begin_quote
このアプリケーションのためのプロトコルに必要な最後のメッセージは、サーバのアップグレードをするためのものです。
#+end_quote

Erlangを学ぶまでこのあたりの意識は低かったのだけど，
どう殺すか，どう再起動するか，どうアップデートするか，以前より考えるようになってきた．
