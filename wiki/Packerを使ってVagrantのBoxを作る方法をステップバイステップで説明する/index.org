* Packerを使ってVagrantのBoxを作る方法をステップバイステップで説明する

Packer を使って Vagrant の Box を OS インストールから作成できたので，ステップバイステップで説明する．

コードは github の [[https://github.com/niku/my-packer-and-vagrant-example/][niku/my-packer-and-vagrant-example]] にある．


** 読むと手に入るもの

: packer build wheezy64.json
と実行するだけで
「chef-solo が実行可能な Vagrant 用 Box を OS インストールから全自動で作成してくれる環境」
の作り方．

問題にあたったときに，どういうところを参考にしたらよいか，がわかる．(ように書きたいと考えている)

** 読んでも手に入らないもの

1. VirtualBox/Vagrant/Packer のインストール方法
2. Vagrant Box 作成のベストプラクティス

2 については [[https://github.com/jedi4ever/veewee/tree/master/templates][veewee/templates]] 以下を見るのがよい．今回もかなり参考にさせてもらった．

** 必要なソフト

- [[https://www.virtualbox.org/][VirtualBox]]
- [[http://www.vagrantup.com/][Vagrant]]
- [[http://www.vagrantup.com/][Packer]]

ホスト OS は windows7 である．

今回は VirtualBox4.2.16 / Vagrant1.2.7 / Packer 0.2.3 で行なった．

Packer は現在 (2013/08/20) 最新版が不安定なことがあるので，最新版で試してみて，うまくいかなければ 0.2.3 へダウングレードしてみるとよい．

僕が 0.3.x 系を試したときにはいくつか不安定な挙動をした．0.2.3 ではそのようなことはおきなかった．

** 0. テンプレート解析に失敗する

以降のステップは全て my-packer-and-vagrant-template ディレクトリで作業している．

#+BEGIN_SRC
$ packer build wheezy64.json
Failed to parse template: open wheezy.json: no such file or directory
#+END_SRC

まだ何も用意していないので当然エラーになる．

最小限のテンプレートを用意する．

[[http://www.packer.io/docs/templates/introduction.html][TEMPLATES]] には builders が必須 (required)，[[http://www.packer.io/docs/builders/virtualbox.html][VirtualBox Builder]] には
- iso_checksum_type
- iso_checksum
- iso_url
- ssh_username
が必須 (required) と書いてあるので，準備する．

[[https://github.com/niku/my-packer-and-vagrant-example/commit/7171bf7417fb8464fa2aab8044a351a05eef6d3d][7171bf7417fb8464fa2aab8044a351a05eef6d3d]] のようになる．

** 1. ブートメニューで止まる

: $ packer build wheezy64.json

すると，Debian の ISO がダウンロードされて

[[01-stop-at-boot-menu.png]]

のようにブート画面が起動する．しかしそこからは何も進まない．

大抵の OS には，ファイルを用意しておくと自動的にインストールを進めてくれるような機能が備わっており，
Packer ではそれを利用して OS の自動インストールを進められるようになっている．

その機能を利用するためには，最初に Boot Command というのものを入力しなければならないが，すぐに理解するのは難しい．
そこで [[https://github.com/jedi4ever/veewee/tree/master/templates][veewee のテンプレート]] を流用させてもらうことにする．リンク先を見てわかるように主要な OS のテンプレートは揃っている．

[[https://github.com/jedi4ever/veewee/blob/master/templates/Debian-7.1.0-amd64-netboot/definition.rb][veewee の definition.rb]] を開くと，:boot_cmd_sequence という項目がある．その部分をコピーして

1. JSON として利用するために '( シングルクォート ) を "( ダブルクォート ) に変更
2. Packer のキーシュミレートにあわせて <Abc> を <abc> のように変更
3. Packer の変数にあわせて %IP% を {{ .HTTPIP }} のように変更

の 3 つを行った．

Packer の Boot Command の詳細は [[http://www.packer.io/docs/builders/virtualbox.html][VirtualBox Builder]] に記述がある．

[[https://github.com/niku/my-packer-and-vagrant-example/commit/965428a5ced59ace6ce772d8caee42cd86f34a11][965428a5ced59ace6ce772d8caee42cd86f34a11]] のようになる．

** 2. ブートコマンド入力中に止まる

前回と同じように

: $ packer build wheezy64.json -force

すると，ブート画面が起動する．(force は，[[http://www.packer.io/docs/command-line/build.html][作りかけのディレクトリを強制的に上書きするオプション]])

10 秒くらい待つと画面が切り換わって，文字を入力しはじめるが，図のような状態で止まってしまう．

[[02-stop-at-boot-command.png]]

i が入力されておらず install ではなく nstall になってしまっているせいである．

Boot Command はキー入力をエミュレートしているので「画面が切り換わったら」という処理には対応していない．(画面を見ずにキーを入力しているのと同じ)

そこで，ブート画面起動 -> 10 秒くらい待つ -> Esc を押す -> install を入力するのあいだにウェイト処理を入れ，ブート画面起動 -> 10 秒くらい待つ -> Esc を押す -> 1 秒待つ -> install とする．

キー入力のウェイト制御は [[http://www.packer.io/docs/builders/virtualbox.html][Boot Command の <wait>]] で行う．今回の自分の環境では起こらなかったが，もしブート画面が起動する前にキー入力が始まってしまう場合は [[http://www.packer.io/docs/builders/virtualbox.html][boot_wait]] の時間を伸ばしてみるとよい．

差分は [[https://github.com/niku/my-packer-and-vagrant-example/commit/6a29e4df31e804c93672ad8e5ea37ca4f0852884][6a29e4df31e804c93672ad8e5ea37ca4f0852884]] のようになる．

** 3. コンフィグファイルがダウンロードできなくて止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，エラー画面になる．

[[03-fail-at-download-debconf-preconfiguration-file.png]]

OS のインストールをする際，いくつか設定が必要である．OS を自動的にインストールするためには，それらの設定を自動で行う必要がある．各 OS には，たいてい自動インストール用の設定を取得する方法が用意されている．

Packer では自動インストールが簡単にできるように，いくつかの仕組みを用意している．

Debian, Ubuntu, CentOS などではネットワーク越しに自動インストールの設定が取得できるようになっている．
Packer は HTTP サーバーになる機能をもっていて，[[http://www.packer.io/docs/builders/virtualbox.html][http_directory]] を指定すれば，その下にあるファイルを HTTP サーバー越しに取得できる．

Windows ではフロッピーディスクから自動インストールの設定が取得できるようになっている．
Packer はフロッピーディスクをエミュレートする機能をもっていて，[[http://www.packer.io/docs/builders/virtualbox.html][floppy_files]] を指定すれば，そのファイルをフロッピードライブ越しに取得できる．

今回は Debian をインストールしているので http_directory を指定して，そこに自動インストールの設定を置いた．
設定ファイルの書き方やサンプルは各 OS のマニュアルに用意されているはずなので，そこから探す．
今回の場合だと[[http://www.debian.org/releases/stable/amd64/apbs04.html.ja][事前設定ファイルの内容 (wheezy 用)]] というページを参考に [[http://www.debian.org/releases/wheezy/example-preseed.txt]] から取得してきた．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/0405ae17533c3eb2a959f4223594a7c99f0c3ed5][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/0405ae17533c3eb2a959f4223594a7c99f0c3ed5][前回からの差分]]

** 4. ルートパスワード入力待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つとルートパスワード入力画面になって止まる．

[[04-stop-at-input-root-password.png]]

ここからは[[http://www.debian.org/releases/stable/amd64/apbs04.html.ja][事前設定ファイルの内容の説明]]，事前設定ファイルに書いてあるコメント，グーグル，勘の 4 つを駆使して作業を進める．
ここには正解ルートがスラスラと書いてあるので，全然悩まなかったようにみえるだろうが，実際には多少悩みながら行きつ戻りつ作業していた．
もしうまくいかなくても，コマンド一つで再チャレンジできるので，気楽に変更してみるとよい．

画面の内容を見ると，root password の入力が必要らしい．事前設定ファイルの説明を password で検索すると，B.4.5 にアカウント設定というのがあるので，これだろう．

今回は，Debian でよくある root でログインしない（かわりに各ユーザーの sudo 権限で操作する）という方式にしようと思うので

: #d-i passwd/root-login boolean false
を
: d-i passwd/root-login boolean false
とコメントアウトする．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/858351d5dc0403e306dc0d6b600a6b9a21bd3069][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/858351d5dc0403e306dc0d6b600a6b9a21bd3069][前回からの差分]]

** 5. ユーザー名 ( フルネーム ) 入力待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つとユーザー名 ( フルネーム ) 入力画面になって止まる．

[[05-stop-at-input-user-full-name.png]]

"4. ルートパスワード入力待ちで止まる" と同様に，事前設定ファイルの説明 B.4.5 をみて

: #d-i passwd/user-fullname string Debian User
を
: d-i passwd/user-fullname string Vagrant User
とコメントアウトする．

後述するように [[http://docs-v1.vagrantup.com/v1/docs/base_boxes.html][Vagrant が期待する初期値 ( Convention over Configration を参照のこと )]] はある．しかしフルネームは特に決まっていないようなので，適当に名付けてよい．

** 6. ユーザー名入力待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つとユーザー名入力画面になって止まる．

[[06-stop-at-input-username.png]]

後で使う [[http://docs-v1.vagrantup.com/v1/docs/base_boxes.html][Vagrant では初期ユーザー名に指定がある ( Convention over Configration を参照のこと )]] ので，それに従い vagrant と名付けることにする．

: #d-i passwd/username string debian
を
: d-i passwd/username string vagrant
にする．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/ac93354afa53fe3df9c44574f7723e0da10024ad][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/ac93354afa53fe3df9c44574f7723e0da10024ad][前回からの差分]]


** 7. パスワード入力待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つとパスワード入力画面になって止まる．

[[07-stop-at-input-password.png]]

[[http://docs-v1.vagrantup.com/v1/docs/base_boxes.html][Vagrant では初期パスワードに指定がある ( Convention over Configration を参照のこと )]] ので，それに従い vagrant と名付けることにする．

: #d-i passwd/user-password password insecure
を
: d-i passwd/user-password password vagrant
にする．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/3d97b15dc57ab27b0f1f2553b768f25fb979599b][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/3d97b15dc57ab27b0f1f2553b768f25fb979599b][前回からの差分]]

** 8. 再パスワード入力待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つと再パスワード入力画面になって止まる．

[[08-stop-at-input-password-verify.png]]

当然 "7. パスワード入力待ちで止まる" と同じものを設定しないとエラーになる ( はず．試してはいない…… ) ので vagrant と入力する．

: #d-i passwd/user-password-again password insecure
を
: d-i passwd/user-password-again password vagrant
にする．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/18f78b2779d85b8b3c063a360e093203610abc88][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/18f78b2779d85b8b3c063a360e093203610abc88][前回からの差分]]

** 9. パッケージ人気投票参加選択待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つと[[http://popcon.debian.org/][パッケージ人気投票]]参加選択待ちで止まる．

[[09-stop-at-choose-to-participate-popularity-contest.png]]

（文字がぐちゃっとなるのが気になるが原因は調べていない．読めはするので今回は気にしないことにした）

人気投票は debian が，どのパッケージが人気か調べて インストール用 CD の 1 枚目に入れるパッケージを決めたりするのに使う．
週に 1 回の送信で，かつ匿名なので参加してもかまわないのだが，今回は参加しないことにする．

[[https://github.com/niku/my-packer-and-vagrant-example/blob/18f78b2779d85b8b3c063a360e093203610abc88/preseed.cfg][preseed.cfg]] を popularity で検索すると
: #popularity-contest popularity-contest/participate boolean false
という，それらしいものが検索にひっかかる．

これをコメントアウトして
: popularity-contest popularity-contest/participate boolean false
にする．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/e33b1caa6f4801d1d8ce7b491a75cda019393b4e][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/e33b1caa6f4801d1d8ce7b491a75cda019393b4e][前回からの差分]]

** 10. インストールするソフトウェアタスクの選択待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つとインストールするソフトウェアタスクの選択待ちで止まる．

[[10-stop-at-choose-software-to-install.png]]

今回はミニマルを目指して，何も含めないで進めることにしているので．[[http://www.debian.org/releases/stable/amd64/apbs04.html.ja][B.4. 事前設定ファイルの内容 (wheezy 用) - B.4.10. パッケージ選択]] を参考にして，
: #tasksel tasksel/first multiselect standard, web-server
を
: tasksel tasksel/first multiselect
へ変更した．「何も含めない」という指定の方法は空欄でよいようだ．

( あらためて参考文献を読むと「standard タスクは常に含めるのをお勧めします」と書いてあったので，standardくらいは含めておいてもよかったなと，今は思っている )

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/b10d3e8564776fc71fe3550cf7fc39de69f48cea][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/b10d3e8564776fc71fe3550cf7fc39de69f48cea][前回からの差分]]

** 11. ブートローダーをインストールするかの選択待ちで止まる

: $ packer build wheezy64.json -force

すると，ブート画面が起動して，ブートコマンドが入力され，しばらく待つとブートローダーをインストールするかの選択待ちで止まる．

[[11-stop-at-choose-install-grub-boot-loader.png]]

ここでブートローダーを入れないを選択するのは，他の OS が既にインストールされており，共存させる場合である．今回は新規にまっさらな状態から作っているので，ブートローダーは必ずインストールする．

[[http://www.debian.org/releases/stable/amd64/apbs04.html.ja][B.4. 事前設定ファイルの内容 (wheezy 用) - B.4.11. ブートローダのインストール]] を参考に
: d-i grub-installer/only_debian boolean true
を追記した．

( 取得した初期設定ファイルにはこの記述がなかった．なぜだろう？ )

だんだんサクサク進めていけている気がする．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/af3635cc6dc799d6f247f5d75abfbb5def8bcc3a][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/af3635cc6dc799d6f247f5d75abfbb5def8bcc3a][前回からの差分]]

** 12. ログインコンソールで止まる

"11. ブートローダーをインストールするかの選択待ちで止まる" が終わると，Packer による仮想 OS の作成がひとまず正常に完了する．やった！ヒュー！

さて，次に Packer によって作成した仮想 OS を Vagrant で起動できるようにしたい．
そこで[[https://github.com/niku/my-packer-and-vagrant-example/commit/0b523797f441af224cac57d148c02894e0694747][このように]] Packer 設定ファイルの [[http://www.packer.io/docs/post-processors/vagrant.html][post-process に vagrant を指定]]する．

その状態で
: $ packer build wheezy64.json -force
するとコンソール画面は以下のようになって止まる．

#+BEGIN_EXAMPLE
$ packer build wheezy64.json --force
virtualbox output will be in this color.

==> virtualbox: Downloading VirtualBox guest additions. Progress will be shown periodically.
==> virtualbox: Copying or downloading ISO. Progress will be reported periodically.
    virtualbox: Download progress: 0%
==> virtualbox: Starting HTTP server on port 8081
==> virtualbox: Creating virtual machine...
==> virtualbox: Creating hard drive...
==> virtualbox: Creating forwarded port mapping for SSH (host port 3213)
==> virtualbox: Starting the virtual machine...
==> virtualbox: Waiting 10s for boot...
==> virtualbox: Typing the boot command...
==> virtualbox: Waiting for SSH to become available...
#+END_EXAMPLE

その際 VirtualBox が起動しており，ログイン画面が出たままになる．

[[12-stop-at-login-console.png]]

待っても何もおきない．

この問題解決のヒントは，コンソール画面の最後の文章に書いてある．
コンソール画面では VirturlBox で起動した OS へ SSH で接続できるようになるのを待っている．
つまり，VirtualBox で起動した OS では SSH 接続を受け入れられる準備をしておかなければならない．

SSH 接続を受け入れるには，ssh のサーバー機能を動かしておく．Debian では openssh-server というものがそれに対応するので

: #d-i pkgsel/include string openssh-server build-essential
を
: d-i pkgsel/include string openssh-server
のように変更して，OS インストール時に openssh-server もインストールするよう変更する．

ここまでやって，再度
: $ packer build wheezy64.json -force
してもコンソール画面は同じところで止まる．

実は SSH でログインするには
1. ログインしたい側 ssh クライアント機能
2. ログイン受け入れ側 ssh サーバー機能
3. ログイン受け入れ側ユーザー名
4. ログイン受け入れ側パスワード or 公開鍵
が必要なのだ．

今の状態を整理すると 1 は vagrant に組込まれている．
2 は先程用意した (openssh-server) ．
3 は設定ファイルに書いてある [[https://github.com/niku/my-packer-and-vagrant-example/blob/cb007d5ae2518d29371a95c7bbb71c2f835a2c40/wheezy64.json#L7][ssh_username]] を利用する．
しかし 4 については何も用意していない．
そのために SSH ログインができない状態になっている．

そこでパスワードを
: "ssh_password": "vagrant",
のように設定ファイルに記載してやる．

今までにくらべて，いくつかの変更をしないと直面している問題が解決しなかったので，やや長くなってしまった．
落ちついて読みなおすと，3 箇所しか変更していないので，つまっても何度か試してみてほしい．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/8681df8359226525572cef78f4a226e71c24f380][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/8681df8359226525572cef78f4a226e71c24f380][前回からの差分]]

ちなみにここまでやると以下のように packer_virtualbox_virtualbox.box が生成される．いぇーい．

#+BEGIN_SRC
$ packer build wheezy64.json --force
virtualbox output will be in this color.

==> virtualbox: Downloading VirtualBox guest additions. Progress will be shown periodically.
==> virtualbox: Copying or downloading ISO. Progress will be reported periodically.
==> virtualbox: Starting HTTP server on port 8081
==> virtualbox: Creating virtual machine...
==> virtualbox: Creating hard drive...
==> virtualbox: Creating forwarded port mapping for SSH (host port 3213)
==> virtualbox: Starting the virtual machine...
==> virtualbox: Waiting 10s for boot...
==> virtualbox: Typing the boot command...
==> virtualbox: Waiting for SSH to become available...
==> virtualbox: Connected to SSH!
==> virtualbox: Uploading VirtualBox version info (4.2.16)
==> virtualbox: Uploading VirtualBox guest additions ISO...
==> virtualbox: Halting the virtual machine...
==> virtualbox: Preparing to export machine...
    virtualbox: Deleting forwarded port mapping for SSH (host port 3213)
==> virtualbox: Exporting virtual machine...
==> virtualbox: Unregistering and deleting virtual machine...
==> virtualbox: Running post-processor: vagrant
==> virtualbox (vagrant): Creating Vagrant box for 'virtualbox' provider
    virtualbox (vagrant): Copying: output-virtualbox\packer-disk1.vmdk
    virtualbox (vagrant): Copying: output-virtualbox\packer.ovf
    virtualbox (vagrant): Renaming the OVF to box.ovf...
    virtualbox (vagrant): Compressing box...
Build 'virtualbox' finished.

==> Builds finished. The artifacts of successful builds are:
--> virtualbox: 'virtualbox' provider box: packer_virtualbox_virtualbox.box
#+END_SRC

** 13. vagrant up に失敗する

さて vagrant box が生成されたので起動してみよう．

Vagrant は
: vagrant up
すると起動する．

#+BEGIN_SRC
$ vagrant up
A Vagrant environment is required to run this command. Run `vagrant init`
to set one up in this directory, or change to a directory with a
Vagrantfile and try again.
#+END_SRC

おや……

実はエラーメッセージの中にもあるように Vagrantfile というものを用意するか，
vagrant init と実行して初期設定しなければならない．

そこで，言われた通りに
: vagrant init
を行なうと Vagrantfile が生成される．

- [[https://github.com/niku/my-packer-and-vagrant-example/tree/33b0b42f4018cc49594a5522a8f54f7ec79af4cc][ここまでの状態]]
- [[https://github.com/niku/my-packer-and-vagrant-example/commit/33b0b42f4018cc49594a5522a8f54f7ec79af4cc][前回からの差分]]

** 14. vagrant up に失敗する(2)

Vagrantfile を生成したので再度 vagrant up する．

#+BEGIN_SRC
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
There are errors in the configuration of this machine. Please fix
the following errors and try again:

vm:
* The box 'base' could not be found.
#+END_SRC

今度は「'base' という名前の box が見つけられない」というエラーになる．

vagrant は box を利用する．その際，どの box を利用するかは Vagrantfile の中に書いてある．

今は
: config.vm.box = "base"
となっている．

そこで vagrant は base という box を探すが，見つけられない．
なので「'base' という名前の box が見つけられない」というエラーになる．

これを解決するには vagrant に対して「base という名前でこの box ファイルを利用しますよー」と教えてやればいい．

そのコマンドは
: vagrant box add [box名] [boxファイル名]
となる．

実行してみる

#+BEGIN_SRC
$ vagrant box add base packer_virtualbox_virtualbox.box
Downloading or copying the box...
Extracting box...
Successfully added box 'base' with provider 'virtualbox'!
#+END_SRC

うまくいったようだ．

今回はソースコードには何も手を加えていない．

** 15. vagrant で起動した仮想環境に SSH で接続できなくて失敗する

vagrant up すると，virtural box が GUI 起動して，ログイン画面が表示される．が，その後何もおきない．

数分待っていると GUI も終了し，コンソールもエラーで終わる．

コンソールのメッセージは以下のようになる

#+BEGIN_SRC
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
[default] Importing base box 'base'...
[default] Matching MAC address for NAT networking...
[default] Setting the name of the VM...
[default] Clearing any previously set forwarded ports...
[default] Fixed port collision for 22 => 2222. Now on port 2200.
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Forwarding ports...
[default] -- 22 => 2200 (adapter 1)
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] Failed to connect to VM!
Failed to connect to VM via SSH. Please verify the VM successfully booted
by looking at the VirtualBox GUI.
#+END_SRC

vagrant を起動した環境 ( 以下「ホスト環境」と呼ぶ ) と，vagrant で起動された仮想環境 ( 以下「VM環境」と呼ぶ ) の間は SSH で接続する．

: Failed to connect to VM via SSH. Please verify the VM successfully booted
というメッセージからもわかるとおり，この SSH 接続がうまくできていない．

SSH 接続がうまくできていない原因はいくつかある．以下 16 - 18 の手順で一つずつ解消していこう．
