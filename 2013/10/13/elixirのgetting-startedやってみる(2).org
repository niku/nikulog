* elixirのgetting-startedやってみる(2)

つづき．
0.10.3 の getting-started を元に書いている．
適当に自分が理解できる程度に訳しているので全く信用してはいけない．

** [[http://elixir-lang.org/getting_started/2.html][2 Diving in]]

基本的な型についてもうちょっと詳しくつっこんでみる．
あとは制御フローと無名関数について話す．

*** 2.1 リストとタプル

#+BEGIN_SRC
iex> is_list [1,2,3]
true
iex> is_tuple {1,2,3}
true
#+END_SRC

どうやってメモリに保持されるかが違う．

リストは linked list で実装されている．
つまり，ある要素を調べると，次の要素への参照先が書いてある．

対して，タプルは連続したメモリを確保して保持されている．

これはつまり，タプルは要素へのアクセスが速い．
しかし，タプルのあるデータを更新するときは，それ以外の要素のメモリを全てコピーするので高くつく．

タプルの要素は elem と set_elem で取得/更新できる

#+BEGIN_SRC
iex > elem { :a, :b, :c }, 0
:a
iex > set_elem { :a, :b, :c }, 0 :d
{:d, :b, :c}
#+END_SRC

タプルの要素の更新は遅いので，要素を追加/削除するときはリストを使う．
リストはリンクされている．つまり，最初の要素にアクセスするのは手数が少ない．
N 番目の要素にアクセスするには N-1 個のノードを通らなければならない．

リストの先頭は以下のように取得できる

#+BEGIN_SRC
# 先頭と，リストの残りに合致させる
iex> [head | tail] = [1,2,3]
[1,2,3]
iex> head
1
iex> tail
[2,3]

# 先頭と，リストの残りを元に戻す
iex> [head | tail]
[1,2,3]
iex> length [head | tail]
3
#+END_SRC

上の例のように先頭の値は =head= ，残りのリストは =tail= で取得できている．
これは *パターンマッチング* と呼ばれている．

タプルでもパターンマッチングできる

#+BEGIN_SRC
iex> { a, b, c } = { :hello, "world", 42 }
{ :hello, "world", 42 }
iex> a
:hello
iex> b
"world"
#+END_SRC

パターンマッチングは両辺が揃わないとエラーになる．

例えば，異なるサイズのタプルをパターンマッチさせたとき

#+BEGIN_SRC
iex> { a, b, c } = { :hello, "world" }
** (MatchError) no match of right hand side value: {:hello,"world"}
#+END_SRC

異なる型をパターンマッチさせたとき

#+BEGIN_SRC
iex> { a, b, c } = [:hello, "world", '!']
** (MatchError) no match of right hand side value: [:hello,"world",'!']
#+END_SRC

最も興味深いのは，特定の値にマッチさせることができる．
次の例は，右側がタプルで，キーとして =:ok= という atom から始まるものだけを受けつけるということを，左側の部分で指定している．

#+BEGIN_SRC
iex> { :ok, result } = { :ok, 13 }
{:ok,13}
iex> result
13

iex> { :ok, result } = { :error, :oops }
** (MatchError) no match of right hand side value: {:error,:oops}
#+END_SRC

パターンマッチングを使うと，データ型，例えばリストやタプルを簡単に解体できるようになる．
これは Elixir で再帰を扱うときの重要な要素のうちの一つとなる．後の章で紹介する．

ともあれ，そこにたどりつくまで反復処理をすることが待てないというのなら，
=Enum= モジュールや =List= モジュールでリストのヘルパーを提供していることを知らせておく．

#+BEGIN_SRC
iex> Enum.at [1,2,3], 0
1
iex> List.flatten [1,[2],3]
[1,2,3]
#+END_SRC

*** 2.2 キーワードリスト

Elixir はキーワードのリストを作るための特別な構文を用意している．

#+BEGIN_SRC
iex> [a: 1, b: 2]
[a: 1, b: 2]
#+END_SRC

キーワードリストは，2 要素で，最初の要素が atom であるタプル，のリストでしかない．

#+BEGIN_SRC
iex> [head | tail] = [a: 1, b: 2]
[a: 1, b: 2]
iex> head
{ :a, 1 }
#+END_SRC

=Keyword= というモジュールは，キーワードリストを操作するための便利な関数をいくつか用意している．
そこでは要素の重複を無視して扱ったり，あるいは無視せず扱ったりできる．

#+BEGIN_SRC
iex> keywords = [foo: 1, bar: 2, foo: 3]
iex> Keyword.get keywords, :foo
1
iex> Keyword.get_values keywords, :foo
[1,3]
#+END_SRC

キーワードリストは関数へ引数として渡すことがとても多いので，
関数へ最後の引数として渡す場合には =[]= を省略できる．
例えば以下の例は全て正しくて，同じ内容である．

#+BEGIN_SRC
iex> if(2 + 2 == 4, [do: "OK"])
"OK"
iex> if(2 + 2 == 4, do: "OK")
"OK"
iex> if 2 + 2 == 4, do: "OK"
"OK"
#+END_SRC


*** 2.3 String（バイナリ）とChar の列（リスト）

Elixir において，ダブルクォートされた値とシングルクォートされた値は，異なる．

#+BEGIN_SRC
iex> "hello" == 'hello'
false
iex> is_binary "hello"
true
iex> is_list 'hello'
true
#+END_SRC

ダブルクォートされた値は *string* であり，バイナリで表現される．
シングルクォートされた値は *char list* であり，リストで表現される．

事実，ダブルクォートされた値とシングルクォートされた値の両方とも，
単にバイナリとリストの短い表現でしかない．

Elixir では =?a= は =a= の ASCII 値を表す．そこで以下のようにも書ける．

#+BEGIN_SRC
iex> is_integer ?a
true
iex> <<?a, ?b, ?c>>
"abc"
iex> [?a, ?b, ?c]
'abc'
#+END_SRC

このようなケースでは Elixir はバイナリ内の全ての文字が印刷可能なことを調べて，クォートでくくった表現を返す．
しかし印刷可能でない文字が含まれていると，違った表し方をされる．

#+BEGIN_SRC
iex> <<?a, ?b, ?c, 1>>
<<97,98,99,1>>

iex> [?a, ?b, ?c, 1]
[97,98,99,1]
#+END_SRC

Elixir では，明示的に char のリストを反復する場合
( たまに Elixir から Erlang のコードへのインターフェースで用いる )
以外ではダブルクォートでくくられた文字列の方が好ましい．
リストとしてもバイナリとしてもパターンマッチングはできる．

#+BEGIN_SRC
iex> <<a, b, c>> = "foo"
"foo"
iex> a
102
#+END_SRC

つまり，バイナリの tail をパターンマッチさせることもできる．
はじめの 1 バイトを抽出して，残りのバイナリを取得できる．

#+BEGIN_SRC
iex> <<f :: integer, rest :: binary>> = "foo"
"foo"
iex> f
102
iex> rest
"oo"
#+END_SRC

上記の例では，バイナリの各セグメントにタグをつけた．
最初のセグメントは整数型 ( デフォルト ) で，文字 "f" の ASCII コードを取得する．
残りのバイト "oo" はバイナリとして rest に割り当てられる．

Elixir でのバイナリ/ビット文字列構文はとてもパワフルで，
バイト，ビット，UTF8コードポイントなどでマッチさせることができる．
詳し知りたければ [[http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1][Elixir docs]] でみることができる．

次は Unicode について進めていこう．

*** 2.4 Unicode のサポート

Elixir の string は，UTF-8 でエンコードされたバイナリになっている．
例えば "é" という文字は 2 バイトの UTF-8 バイナリである．

#+BEGIN_SRC
iex> string = "é"
"é"
iex> size(string)
2
#+END_SRC

文字列を簡単に操作するために，Elixir は =String= モジュールを提供している．

#+BEGIN_SRC
# バイト数を返す
iex> size "héllò"
7

# 人間が読んだときの文字数を返す
iex> String.length "héllò"
5
#+END_SRC

メモ: Elixir では =size= は事前に値が計算されているものを取得するときに使う． =length= は値を取得するのに処理が必要なときに使う．

"héllò" の一文字ずつは Unicode codepoint となっている． =String.codepoints= は String をコードポイント毎の文字に分割する．

#+BEGIN_SRC
iex> String.codepoints "héllò"
["h", "é", "l", "l", "ó"]
#+END_SRC

Unicode 標準は各文字に対して整数を割り当てる．Elixir はその整数を元に文字を取得したり挿入したりできる．

#+BEGIN_SRC
# コードポイントを求める
iex> ?h
104
iex> ?é
233

# 16進数の値でコードポイントを挿入する
iex> "h\xE9ll\xF2"
"héllò"
#+END_SRC

UTF-8 はパターンマッチングとうまく動作する．
以下の例では，文字列の最初の UTF-8 コードポイントを抽出して，残りを =rest= に割り当てる．

#+BEGIN_SRC
iex> << eacute :: utf8, rest :: binary >> = "épa"
"épa"
iex> eacute
233
iex> << eacute :: utf8 >>
"é"
iex> rest
"pa"
#+END_SRC

一般的に，バイナリと文字列を Elixir で扱うのは簡単だろう．
もしもっと生々しくバイナリをいじりたくなった場合は [[http://www.erlang.org/doc/man/binary.html][Erlang のバイナリモジュール]] を用いたり，
文字列として扱いたいなら [[http://elixir-lang.org/docs/stable/String.html][Elixir の String モジュール]] を用いることができる．

*** 2.5 ブロック

たいてい，最初に学ぶ制御フローの一つは =if= 条件だ．
Elixir では以下のように書ける．

#+BEGIN_SRC
iex> if true, do: 1 + 2
3
#+END_SRC

=if= 式はブロック構文を使っても書ける．

#+BEGIN_SRC
iex> if true do
...>   a = 1 + 2
...>   a + 10
...> end
13
#+END_SRC

=do= / =end= ブロックは，式のまとまりを =do:= へ渡すための簡単な方法と考えることができる．
以下も全く同じ内容を表す

#+BEGIN_SRC
iex> if true, do: (
...>   a = 1 + 2
...>   a + 10
...> )
13
#+END_SRC

ブロックに =else= 句を渡すこともできる

#+BEGIN_SRC
if false do
  :this
else
  :that
end
#+END_SRC

=do= / =end= は，常に最も遠い関数呼び出しにバインドされることに気をつけなければいけない．
例えば次の式は

#+BEGIN_SRC
is_number if true do
  1 + 2
end
#+END_SRC

以下のように解析される

#+BEGIN_SRC
is_number(if true) do
  1 + 2
end
#+END_SRC

=is_number= のような，最も遠い関数呼び出しにバインドされることを求めていない場合．
明示的に括弧を追加することでバインドのあいまいさを解消できる．

#+BEGIN_SRC
is_number(if true do
  1 + 2
end)
#+END_SRC
